{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a421fc57-516c-4dfb-8e46-bdde0de773a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1112279-fc1b-47ba-9a3a-4b160fd36e55",
   "metadata": {},
   "source": [
    "# Step 1: Load arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73111fa7-162e-4bef-9971-5eb4c2733e67",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "filename = '../images/sample.npz' #==> This file contains an image obtained using a lazer scanner. It has a shadow angle of 30 degrees, which means\n",
    "# that the height ranges from 90 degreess to -60 degrees \n",
    "\n",
    "arr = np.load(filename)  # e.g. arr.files -> ['rgb', 'z']\n",
    "\n",
    "rgb = arr['rgb'] # shape: (H, W, 3)\n",
    "\n",
    "depth = np.sqrt(np.sum(arr['z']**2, axis=-1))[:,:,None]  # shape: (H, W, 1), radial distance\n",
    "\n",
    "xyz = arr['z']  # shape: (H, W, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f47b1b0-fac6-49a3-a663-98b78dcf8a9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some misc function:\n",
    "\n",
    "def show(data, scale_rgb = 1):\n",
    "    plt.title(f'Input img, {data.data['rgb'].shape}')\n",
    "    plt.imshow(data.data['rgb'].astype(np.uint8) )\n",
    "    plt.show()\n",
    "    plt.title(f'Input img, {data.data['depth'].shape}')\n",
    "    plt.imshow(data.data['depth'])\n",
    "    plt.show()\n",
    "    plt.title(f'Input img, {data.data['xyz_depth'].shape}')\n",
    "    plt.imshow(data.data['xyz_depth'])\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d20efbb6-af87-4ce8-8253-d7c75ee4faa2",
   "metadata": {},
   "source": [
    "# Step 2: Data Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a6da669-fea4-4818-94f3-e5e69c026ec1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from panorai import PipelineData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43c418e7-3afc-42b8-85bb-8e54bee3fec0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = PipelineData.from_dict({\n",
    "                    \"rgb\": rgb,\n",
    "                    \"depth\": depth,\n",
    "                    \"xyz_depth\": xyz\n",
    "                }\n",
    "                )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab7f9d92-9e12-4cde-8a9f-0528eb16d73f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# To account for the shadow angle we will preprocess the input image with PreprocessEquirectangularImage \n",
    "# panorai.pipeline.utils.preprocess_eq.py, it is called by the method preprocess of the data object\n",
    "\n",
    "show(data)\n",
    "data.preprocess(shadow_angle=30)\n",
    "show(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "673b8baa-429f-467e-80d7-64fbbc9c287c",
   "metadata": {},
   "source": [
    "# Extra: submodule projections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "641f4259-5029-4eee-a487-4101b82196a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from panorai.submodules.projections import ProjectionRegistry\n",
    "\n",
    "proj = ProjectionRegistry.get_projection('gnomonic', return_processor=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fd26453-14f5-484c-bcd2-80e93c42d650",
   "metadata": {},
   "outputs": [],
   "source": [
    "ProjectionRegistry.list_projections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74e2df1c-d255-4f27-aec3-bc1d26718f77",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(proj.config), data.data['rgb'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eda02538-4c0e-45f1-afe1-537de10f3b6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "face = proj.forward(data.data['rgb'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbf1f8b7-886f-4060-8bea-b0556032daf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.imshow(face)\n",
    "face.max(), data.data['rgb'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b17ae1f2-9530-40e4-9fd0-17cf2592b97d",
   "metadata": {},
   "outputs": [],
   "source": [
    "eq_img = proj.backward(face)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4dd38d71-7042-4502-95b1-e5ace2421973",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.imshow(eq_img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "006f10fc-933b-4434-910f-0cc09e67eb15",
   "metadata": {},
   "outputs": [],
   "source": [
    "eq_img = proj.backward(face, lam0_deg=-90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "932f6857-6afb-4eae-86f9-81318df1b3c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.imshow(eq_img)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12e31cbc-902d-4838-bea4-885f7816c45c",
   "metadata": {},
   "source": [
    "# Step 3: ProjectionPipeline (highlevel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71877fd7-8c89-4102-aca6-ff44d814a512",
   "metadata": {},
   "outputs": [],
   "source": [
    "from panorai import ProjectionPipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "518d0c88-d05b-4f18-b14a-faaf4b5d09fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "ProjectionPipeline.list_projections()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ad30e5a-1fbe-4bfa-ae63-52410e08cc27",
   "metadata": {},
   "outputs": [],
   "source": [
    "ProjectionPipeline.list_samplers()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20ac5c4e-2a3f-4ffb-be43-ab7b86c27ee8",
   "metadata": {},
   "source": [
    "## Simple projection (same as with ProjectionRegistry objects)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "622c6285-dcbc-4ca6-9e36-25506d5e24c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reload data\n",
    "data = PipelineData.from_dict({\n",
    "                    \"rgb\": rgb,\n",
    "                    \"depth\": depth,\n",
    "                    \"xyz_depth\": xyz\n",
    "                }\n",
    "                )\n",
    "from panorai.pipeline import PreprocessEquirectangularImage ##=== Preprocessing ensures that the shadow angle is correctly\n",
    "# adjusted. It can also be used to rotate the input image by lat and lon\n",
    "\n",
    "data.preprocess(shadow_angle=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49b3960a-221d-4fe5-8196-135031bd2c38",
   "metadata": {},
   "outputs": [],
   "source": [
    "from panorai import ProjectionPipeline\n",
    "\n",
    "pipe = ProjectionPipeline(projection_name='gnomonic')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81e6e481-8a74-4b21-a29c-f1c11be8f0b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "face = pipe.project(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25e01bcd-c134-407a-8c46-0dcd897fc44c",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.imshow(face['rgb'].astype(np.uint8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "255e4340-f52f-4336-8415-06d848d3fe1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "show(PipelineData.from_dict(face.copy()),scale_rgb=255.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7901ccbe-2ebc-4b11-b4f1-963f40b94560",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = ProjectionPipeline(projection_name='mercator')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01c8d0e2-2bfe-4be3-9d36-d64f3e08aeb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "mercator = pipe.project(data, x_points=8246,y_points=3983)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6f9d0ff-719b-45ab-a9ea-2e9a4dc24a35",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "show(PipelineData.from_dict(mercator.copy()),scale_rgb=255.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd233745-a5bc-4618-928d-60d3602e810f",
   "metadata": {},
   "source": [
    "## Let`s add a sampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "287bd2f9-bafa-49c1-b09c-6f8a1a5d453f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from panorai import ProjectionPipeline\n",
    "\n",
    "pipe = ProjectionPipeline(projection_name='gnomonic',sampler_name='CubeSampler')\n",
    "\n",
    "pipe = ProjectionPipeline(projection_name='gnomonic',sampler_name='IcosahedronSampler')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc49f274-2983-4e32-bfdd-9ff6e681a0d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "faces = pipe.project(data, subdivisions=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b171a62-3080-4f94-a04d-1d5160946ba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "faces.keys(), len(faces)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fc616a9-2f50-484d-b184-08bc02bfc365",
   "metadata": {},
   "outputs": [],
   "source": [
    "show(PipelineData.from_dict(faces['point_5']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b7c210f-61d7-46b7-bb20-6c0e59cc9031",
   "metadata": {},
   "outputs": [],
   "source": [
    "reconstructed = pipe.backward(faces, n_jobs=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d714af5b-6249-43a5-a0a3-2a712a259814",
   "metadata": {},
   "outputs": [],
   "source": [
    "reconstructed.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6329899-abaf-4512-afe7-c204dc0d3e51",
   "metadata": {},
   "outputs": [],
   "source": [
    "_ = reconstructed.pop('stacked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6ea76b5-5562-4a6a-a361-38d01d74a001",
   "metadata": {},
   "outputs": [],
   "source": [
    "show(PipelineData.from_dict(reconstructed))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63b31490-28dc-4fa2-bf5e-8db1d99e27e0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "faces = pipe.project(data, subdivisions=2, fov_deg=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6424cb9d-e9af-4b97-b2d3-36da84efecc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "show(PipelineData.from_dict(faces['point_5']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efaac26f-b5aa-4041-9add-15b8381514d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "reconstructed = pipe.backward(faces, n_jobs=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6fda70d-1193-4fb7-87a1-0699034225c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "_ = reconstructed.pop('stacked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfe7aa47-2851-4eb7-bf1a-41966e92a750",
   "metadata": {},
   "outputs": [],
   "source": [
    "show(PipelineData.from_dict(reconstructed))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f61165ec-93a9-4a4a-86ea-5c3b7631d5bf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
